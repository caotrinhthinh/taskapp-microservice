# version: "3.8"

services:
  # MySQL Database for User Service
  mysql:
    image: mysql:8.0
    container_name: task-app-mysql
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: 61120055
      MYSQL_DATABASE: userdb
    ports:
      - "3306:3306"
    volumes:
      - mysql_data:/var/lib/mysql
    networks:
      - task-app-network
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "mysqladmin ping -h localhost -u root -p61120055 || exit 1",
        ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # MongoDB Database for Task & Notification Services
  mongodb:
    image: mongo:6.0
    container_name: task-app-mongodb
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: caotrinhthinh
      MONGO_INITDB_ROOT_PASSWORD: 61120055
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
    networks:
      - task-app-network
    healthcheck:
      test:
        [
          "CMD-SHELL",
          'mongosh -u caotrinhthinh -p 61120055 --authenticationDatabase admin --eval ''db.adminCommand("ping")'' || exit 1',
        ]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 30s

  # RabbitMQ
  rabbitmq:
    image: rabbitmq:3.12-management
    container_name: task-app-rabbitmq
    restart: unless-stopped
    environment:
      RABBITMQ_DEFAULT_USER: caotrinhthinh
      RABBITMQ_DEFAULT_PASS: 61120055
    ports:
      - "5672:5672"
      - "15672:15672"
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - task-app-network
    healthcheck:
      test: ["CMD-SHELL", "rabbitmq-diagnostics ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # User Service (Spring Boot)
  user-service:
    build:
      context: ./user-service
      dockerfile: Dockerfile
    container_name: task-app-user-service
    restart: unless-stopped
    ports:
      - "8081:8081"
    environment:
      SPRING_DATASOURCE_URL: jdbc:mysql://mysql:3306/userdb?createDatabaseIfNotExist=true&useSSL=false&allowPublicKeyRetrieval=true
      SPRING_DATASOURCE_USERNAME: root
      SPRING_DATASOURCE_PASSWORD: 61120055
      SPRING_RABBITMQ_HOST: rabbitmq
      SPRING_RABBITMQ_PORT: 5672
      SPRING_RABBITMQ_USERNAME: caotrinhthinh
      SPRING_RABBITMQ_PASSWORD: 61120055
      SPRING_JPA_HIBERNATE_DDL_AUTO: update
      SPRING_JPA_SHOW_SQL: "true"
      SERVER_PORT: 8081
    depends_on:
      mysql:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - task-app-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 180s

  # Task Service (Node.js)
  task-service:
    build:
      context: ./task-service
      dockerfile: Dockerfile
    container_name: task-app-task-service
    restart: unless-stopped
    ports:
      - "8082:8082"
    environment:
      PORT: 8082
      NODE_ENV: production
      MONGODB_URI: mongodb://caotrinhthinh:61120055@mongodb:27017/taskdb?authSource=admin
      RABBITMQ_URL: amqp://caotrinhthinh:61120055@rabbitmq:5672
      RABBITMQ_EXCHANGE: task-exchange
      RABBITMQ_QUEUE_USER_EVENTS: user-events-queue
      RABBITMQ_QUEUE_TASK_EVENTS: task-events-queue
      USER_SERVICE_URL: http://user-service:8081
    depends_on:
      mongodb:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - task-app-network
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--quiet",
          "--tries=1",
          "--spider",
          "http://localhost:8082/health",
        ]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 40s

  # Notification Service (Node.js)
  notification-service:
    build:
      context: ./notification-service
      dockerfile: Dockerfile
    container_name: task-app-notification-service
    restart: unless-stopped
    ports:
      - "8083:8083"
    environment:
      PORT: 8083
      NODE_ENV: production
      MONGODB_URI: mongodb://caotrinhthinh:61120055@mongodb:27017/notificationdb?authSource=admin
      RABBITMQ_URL: amqp://caotrinhthinh:61120055@rabbitmq:5672
      RABBITMQ_EXCHANGE: task-exchange
      RABBITMQ_QUEUE_USER_EVENTS: user-events-queue
      RABBITMQ_QUEUE_TASK_EVENTS: task-events-queue
    depends_on:
      mongodb:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - task-app-network
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--quiet",
          "--tries=1",
          "--spider",
          "http://localhost:8083/health",
        ]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 40s

  # API Gateway (Node.js)
  api-gateway:
    build:
      context: ./api-gateway
      dockerfile: Dockerfile
    container_name: task-app-api-gateway
    restart: unless-stopped
    ports:
      - "8080:8080"
    environment:
      PORT: 8080
      NODE_ENV: production
      USER_SERVICE_URL: http://user-service:8081
      TASK_SERVICE_URL: http://task-service:8082
      NOTIFICATION_SERVICE_URL: http://notification-service:8083
    depends_on:
      user-service:
        condition: service_healthy
      task-service:
        condition: service_healthy
      notification-service:
        condition: service_healthy
    networks:
      - task-app-network
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--quiet",
          "--tries=1",
          "--spider",
          "http://localhost:8080/health",
        ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

# VOLUMES
volumes:
  mysql_data:
    driver: local
  mongodb_data:
    driver: local
  rabbitmq_data:
    driver: local

# NETWORKS
networks:
  task-app-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
